import aQute.bnd.gradle.Bundle

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.apache.sling:org.apache.sling.bnd.models:1.0.0",
                'se.transmode.gradle:gradle-docker:1.2'
    }
}

plugins {
    id 'pl.allegro.tech.build.axion-release' version '1.12.1'
    id "com.jfrog.bintray" version "1.8.4" apply false
    id "net.ltgt.errorprone" version "1.2.1" apply false
    id "biz.aQute.bnd.builder" version "5.1.1"
    id 'org.javamodularity.moduleplugin' version '1.7.0' apply false
    id "com.github.node-gradle.node" version "2.2.4"
}

apply plugin: 'java'
apply plugin: 'docker'

repositories {
    mavenCentral()
    // snapshot of cocoon-seralizers-charsets
    maven {
        url 'https://repository.apache.org/snapshots'
    }
    mavenLocal()
}

scmVersion {
    tag {
        prefix = 'whistlepost'
    }
    versionCreator 'versionWithBranch'
    branchVersionCreator = [
        'master': 'simple'
    ]
    nextVersion {
        suffix = 'pre'
        separator = '-'
    }
}

group = 'micronode'
version = scmVersion.version
description = '''
A publishing platform based on Apache Sling
'''

sourceCompatibility = 1.8
targetCompatibility = 1.8

def bundleprojects = subprojects.findAll {it.name ==~ /^(whistlepost-|sling-).*/}

ext {
    groovyVersion = '2.4.5'
    slingApiVersion = '2.11.0'
    jacksonVersion = '2.11.3'
    keycloakVersion = '10.0.2'

    bundleStartLevel=20
    config_bundleStartLevel=10
    content_bundleStartLevel=15
}

node {
    download = true
}

configurations {
    embed
    embed.transitive = false
    
    bundles
    bundles.transitive = false

    agent
    agent.transitive = false
}

dependencies {
    embed 'org.apache.sling:org.apache.sling.rewriter:1.1.2',
        'org.apache.sling:org.apache.sling.commons.html:1.0.0',
        'org.apache.cocoon:cocoon-serializers-charsets:1.0.3-SNAPSHOT',
        'org.apache.sling:org.apache.sling.urlrewriter:0.0.2',
        'org.apache.servicemix.bundles:org.apache.servicemix.bundles.urlrewritefilter:4.0.4_1',
        'org.apache.sling:org.apache.sling.scripting.core:2.0.60'

    // filesystem resource provider
    embed 'org.apache.sling:org.apache.sling.fsresource:2.1.16'

    // groovy
    embed "org.codehaus.groovy:groovy:$groovyVersion",
        "org.codehaus.groovy:groovy-jsr223:$groovyVersion",
        "org.codehaus.groovy:groovy-json:$groovyVersion",
        "org.codehaus.groovy:groovy-templates:$groovyVersion",
        'org.apache.sling:org.apache.sling.scripting.groovy:1.0.2',
        'org.apache.sling:org.apache.sling.scripting.core:2.0.58'

    // thymeleaf
    embed 'org.attoparser:attoparser:2.0.5.RELEASE',
        'org.unbescape:unbescape:1.1.6.RELEASE',
        'org.apache.servicemix.bundles:org.apache.servicemix.bundles.ognl:3.2.1_1',
        'org.javassist:javassist:3.27.0-GA',
//        'org.apache.servicemix.bundles:org.apache.servicemix.bundles.thymeleaf:3.0.11.RELEASE_1',
//        'org.thymeleaf:thymeleaf:3.0.12-SNAPSHOT',
        'org.apache.sling:org.apache.sling.scripting.thymeleaf:2.0.2'

    // liquid
    embed 'org.jsoup:jsoup:1.10.3', 'org.antlr:antlr4-runtime:4.7.1'

    // nosql providers..
    embed 'org.apache.sling:org.apache.sling.nosql.generic:1.1.0',
        'org.apache.sling:org.apache.sling.nosql.mongodb-resourceprovider:1.1.0',
        'org.mongodb:mongo-java-driver:3.1.1'

    // sling query
    embed 'org.apache.sling:org.apache.sling.query:4.0.2'

    // icalendar
    embed "org.codehaus.groovy:groovy:2.5.4",
        'org.apache.aries.spifly:org.apache.aries.spifly.dynamic.bundle:1.2.3',
        'org.ow2.asm:asm-all:5.2',
//            'org.apache.aries:org.apache.aries.util:1.1.3',
        'org.mnode.ical4j:ical4j:4.0.0-alpha2',
        'org.threeten:threeten-extra:1.5.0',
        'javax.cache:cache-api:1.1.1',
        'org.ehcache:ehcache:3.4.0'

    // graphql
    embed 'com.graphql-java:graphql-java:13.0',
        'com.graphql-java:java-dataloader:2.1.1',
        'org.reactivestreams:reactive-streams:1.0.2',
        'com.graphql-java-kickstart:graphql-java-servlet:9.1.0',
        'com.graphql-java-kickstart:graphql-java-kickstart:9.1.0'

    // websocket
    embed 'javax.websocket:javax.websocket-api:1.1'

    // json
    embed "com.fasterxml.jackson.core:jackson-core:$jacksonVersion",
        "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion",
        "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion",
        "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$jacksonVersion"

    // felix java12 support..
    embed 'org.apache.felix:org.apache.felix.webconsole.plugins.memoryusage:1.0.10'

    // sling starter..
    embed 'org.apache.sling:org.apache.sling.starter.content:1.0.8'

    // keycloak..
    embed "org.keycloak:keycloak-servlet-filter-adapter:$keycloakVersion",
        "org.keycloak:keycloak-servlet-adapter-spi:$keycloakVersion",
        "org.keycloak:keycloak-adapter-spi:$keycloakVersion",
        "org.keycloak:keycloak-adapter-core:$keycloakVersion",
        "org.keycloak:keycloak-core:$keycloakVersion",
        "org.keycloak:keycloak-common:$keycloakVersion",
        "org.keycloak:keycloak-authz-client:$keycloakVersion",
        'org.apache.httpcomponents:httpclient-osgi:4.5.11',
        'org.apache.httpcomponents:httpcore-osgi:4.4.13',
        'org.jboss.logging:jboss-logging:3.4.1.Final'

    // aem commons..
//    embed "com.adobe.acs:acs-aem-commons-bundle:4.8.6"

//    bundles bundleprojects.findAll {!(it.name ==~ /^(whistlepost-(links|scripting-liquid)).*/)}
    bundles bundleprojects.findAll {!(it.name ==~ /^(whistlepost-scripting-liquid).*/)}

    agent "io.prometheus.jmx:jmx_prometheus_javaagent:0.14.0"
}

task buildWebpack(type: NpmTask) {
    args = ['run', 'buildWebpack']
}

task bundleApp(type: Bundle) {
    archiveBaseName = "whistlepost-app"
    bndfile = 'app.bnd'
    from('src/app') { into 'SLING-INF/content' }
    from('src/assets') { into 'assets' }
}

task bundleConfig(type: Bundle) {
    archiveBaseName = "whistlepost-config"
    bndfile = 'config.bnd'
    from('src/config') { into 'SLING-INF/content' }
}

task bundleContent(type: Bundle) {
    archiveBaseName = "whistlepost-content"
    bndfile = 'content.bnd'
    from('src/content') { into 'SLING-INF/content' }
}

task copyDeps(type: Copy) {
    from configurations.embed
    into 'build/deps'
}

task copyExt(type: Copy) {
    from configurations.bundles
    into 'build/extensions'
}

task copyAgent(type: Copy) {
    from configurations.agent
    from('jmx_prometheus.yml')
    into 'build/agent'
}

jar.enabled = false
bundleApp.dependsOn buildWebpack
buildWebpack.dependsOn yarn
clean.dependsOn yarn_cache_clean
assemble.dependsOn copyDeps, copyExt, copyAgent

artifacts {
    archives bundleApp
    archives bundleConfig
    archives bundleContent
}

configure(bundleprojects) { subproject ->
    apply from: "$rootDir/extension.gradle"
}

task buildDocker(type: Docker) {
    dockerfile = 'Dockerfile'
    applicationName = 'whistlepost'
    tagVersion = 'latest'
    push project.hasProperty('docker_push') && 'true' == docker_push
    apiUsername = project.hasProperty('docker_apiUsername') ? docker_apiUsername : ''
    apiPassword = project.hasProperty('docker_apiPassword') ? docker_apiPassword : ''
    apiEmail = project.hasProperty('docker_apiEmail') ? docker_apiEmail : ''

    addFile 'sling.properties', '/opt/sling/'
    addFile bundleApp.archiveFile.get() as String, "/opt/sling/wp/install/2/"
    addFile bundleConfig.archiveFile.get() as String, "/opt/sling/wp/install/2/"
    addFile bundleContent.archiveFile.get() as String, "/opt/sling/wp/install/2/"

    def runModes = [
            'whistlepost-links': 'proxied'
    ]

    configurations.embed.each {
        addFile it, "/opt/sling/wp/install/27/"
    }

    bundleprojects.each {
//        def startLevel = project.hasProperty("${it.name}_bundleStartLevel") ? project.property("${it.name}_bundleStartLevel") : bundleStartLevel
        def runMode = project.hasProperty("${it.name}_runMode") ? project.property("${it.name}_runMode") : runModes[it.name]
        addFile it.jar.archivePath, "/opt/sling/wp/install${ runMode ? '.' + runMode : ''}/15/"
    }
    bundleprojects.each { dependsOn("${it.name}:bundle") }
}
buildDocker.dependsOn build
