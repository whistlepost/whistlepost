buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.apache.sling:org.apache.sling.bnd.models:1.0.0",
                'se.transmode.gradle:gradle-docker:1.2'
    }
}

plugins {
    id 'pl.allegro.tech.build.axion-release' version '1.13.1'
    id 'net.ltgt.errorprone' version "1.2.1" apply false
    id 'biz.aQute.bnd.builder' version "5.1.1" apply false
    id 'org.javamodularity.moduleplugin' version '1.7.0' apply false
}

apply plugin: 'java'
apply plugin: 'docker'

configure(subprojects) {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'biz.aQute.bnd.builder'

    repositories {
        mavenCentral()
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    group = 'org.mnode.whistlepost'
    version = rootProject.scmVersion.version

    configurations {
        bundles {
            transitive = false
            canBeConsumed = true
            canBeResolved = false
        }
    }
}

repositories {
    mavenCentral()
    // snapshot of cocoon-seralizers-charsets
    maven {
        url 'https://repository.apache.org/snapshots'
    }
    mavenLocal()
}

scmVersion {
    tag {
        prefix = 'whistlepost-'
    }
    versionCreator 'versionWithBranch'
    branchVersionCreator = ['master': 'simple']
//    nextVersion {
//        suffix = 'pre'
//        separator = '-'
//    }
}

group = 'micronode'
version = scmVersion.version
description = '''
A publishing platform based on Apache Sling
'''

//def bundleprojects = subprojects.findAll {it.name ==~ /^(whistlepost-|sling-).*/}


configurations {
    embed
//    embed.transitive = false
    
    bundles
    bundles.transitive = false

    agent
    agent.transitive = false
}

dependencies {
    embed 'com.google.guava:guava:15.0'

    // tika parsers
//    embed 'org.xerial:sqlite-jdbc:3.34.0',
//            'org.apache.pdfbox:jbig2-imageio:3.0.3'

    // filesystem resource provider
    embed 'org.apache.sling:org.apache.sling.fsresource:2.1.16'

//    embed project(path: ':whistlepost-content', configuration: 'bundles')
    embed project(path: ':whistlepost-config', configuration: 'bundles')
    embed project(path: ':whistlepost-scripting-core', configuration: 'bundles')
    embed project(path: ':whistlepost-scripting-groovy', configuration: 'bundles')
    embed project(path: ':whistlepost-scripting-thymeleaf', configuration: 'bundles')
    embed project(path: ':whistlepost-scripting-liquid', configuration: 'bundles')
//    embed project(path: ':whistlepost-authz', configuration: 'bundles')
//    embed project(path: ':whistlepost-nosql', configuration: 'bundles')
    embed project(path: ':whistlepost-models-core', configuration: 'bundles')
    embed project(path: ':whistlepost-models-pages', configuration: 'bundles')
    embed project(path: ':whistlepost-models-schema', configuration: 'bundles')
//    embed project(path: ':whistlepost-graphql', configuration: 'bundles')
    embed project(path: ':whistlepost-rewriter', configuration: 'bundles')
//    embed project(path: ':whistlepost-icalendar', configuration: 'bundles')

    // websocket
//    embed 'javax.websocket:javax.websocket-api:1.1'



    // aem commons..
//    embed "com.adobe.acs:acs-aem-commons-bundle:4.8.6"

//    bundles bundleprojects.findAll {!(it.name ==~ /^(whistlepost-(links|scripting-liquid)).*/)}
//    bundles bundleprojects.findAll {!(it.name ==~ /^(whistlepost-scripting-liquid).*/)}

    agent "io.prometheus.jmx:jmx_prometheus_javaagent:0.14.0"
}

task copyDeps(type: Copy) {
    from configurations.embed
    into 'build/deps'
}

task copyExt(type: Copy) {
    from subprojects.collect { it.tasks.withType(Jar) }
    into 'build/extensions'
}

task copyAgent(type: Copy) {
    from configurations.agent
    from('jmx_prometheus.yml')
    into 'build/agent'
}

jar.enabled = false
assemble.dependsOn copyDeps, copyExt, copyAgent

//configure(bundleprojects) { subproject ->
//    apply from: "$rootDir/extension.gradle"
//}

task buildDocker(type: Docker) {
    dockerfile = 'Dockerfile'
    applicationName = 'whistlepost'
    tagVersion = 'latest'
    push project.hasProperty('docker_push') && 'true' == docker_push
    apiUsername = project.hasProperty('docker_apiUsername') ? docker_apiUsername : ''
    apiPassword = project.hasProperty('docker_apiPassword') ? docker_apiPassword : ''
    apiEmail = project.hasProperty('docker_apiEmail') ? docker_apiEmail : ''

    addFile 'sling.properties', '/opt/sling/'
//    addFile bundleApp.archiveFile.get() as String, "/opt/sling/wp/install/2/"
//    addFile bundleConfig.archiveFile.get() as String, "/opt/sling/wp/install/2/"
//    addFile bundleContent.archiveFile.get() as String, "/opt/sling/wp/install/2/"

    def runModes = [
            'whistlepost-links': 'proxied'
    ]

    configurations.embed.each {
//        addFile it, "/opt/sling/wp/install/27/"
        addFile it, "/opt/sling/bundles/"
    }

    subprojects.each {
//        def startLevel = project.hasProperty("${it.name}_bundleStartLevel") ? project.property("${it.name}_bundleStartLevel") : bundleStartLevel
        def runMode = project.hasProperty("${it.name}_runMode") ? project.property("${it.name}_runMode") : runModes[it.name]
        addFile it.jar.archivePath, "/opt/sling/wp/install${ runMode ? '.' + runMode : ''}/15/"
    }
//    subprojects.each { dependsOn("${it.name}:bundle") }
}
buildDocker.dependsOn build
